//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Backup.Services.VDDK {

public class VixDiskLib {
  public static ulong VixDiskLib_InitEx(uint majorVersion, uint minorVersion, SWIGTYPE_p_f_p_q_const__char_va_list__void log, SWIGTYPE_p_f_p_q_const__char_va_list__void warn, SWIGTYPE_p_f_p_q_const__char_va_list__void panic, string libDir, string configFile) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_InitEx(majorVersion, minorVersion, SWIGTYPE_p_f_p_q_const__char_va_list__void.getCPtr(log), SWIGTYPE_p_f_p_q_const__char_va_list__void.getCPtr(warn), SWIGTYPE_p_f_p_q_const__char_va_list__void.getCPtr(panic), libDir, configFile);
    return ret;
  }

  public static ulong VixDiskLib_Init(uint majorVersion, uint minorVersion, SWIGTYPE_p_f_p_q_const__char_va_list__void log, SWIGTYPE_p_f_p_q_const__char_va_list__void warn, SWIGTYPE_p_f_p_q_const__char_va_list__void panic, string libDir) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Init(majorVersion, minorVersion, SWIGTYPE_p_f_p_q_const__char_va_list__void.getCPtr(log), SWIGTYPE_p_f_p_q_const__char_va_list__void.getCPtr(warn), SWIGTYPE_p_f_p_q_const__char_va_list__void.getCPtr(panic), libDir);
    return ret;
  }

  public static void VixDiskLib_Exit() {
    VixDiskLibPINVOKE.VixDiskLib_Exit();
  }

  public static string VixDiskLib_ListTransportModes() {
    string ret = VixDiskLibPINVOKE.VixDiskLib_ListTransportModes();
    return ret;
  }

  public static ulong VixDiskLib_Cleanup(VixDiskLibConnectParams connectParams, SWIGTYPE_p_unsigned_int numCleanedUp, SWIGTYPE_p_unsigned_int numRemaining) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Cleanup(VixDiskLibConnectParams.getCPtr(connectParams), SWIGTYPE_p_unsigned_int.getCPtr(numCleanedUp), SWIGTYPE_p_unsigned_int.getCPtr(numRemaining));
    return ret;
  }

  public static ulong VixDiskLib_Connect(VixDiskLibConnectParams connectParams, out global::System.IntPtr connection) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Connect(VixDiskLibConnectParams.getCPtr(connectParams), out connection);
    return ret;
  }

  public static ulong VixDiskLib_PrepareForAccess(VixDiskLibConnectParams connectParams, string identity) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_PrepareForAccess(VixDiskLibConnectParams.getCPtr(connectParams), identity);
    return ret;
  }

  public static ulong VixDiskLib_ConnectEx(VixDiskLibConnectParams connectParams, char readOnly, string snapshotRef, string transportModes, out global::System.IntPtr connection) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_ConnectEx(VixDiskLibConnectParams.getCPtr(connectParams), readOnly, snapshotRef, transportModes, out connection);
    return ret;
  }

  public static ulong VixDiskLib_Disconnect(global::System.IntPtr connection) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Disconnect(connection);
    return ret;
  }

  public static ulong VixDiskLib_EndAccess(VixDiskLibConnectParams connectParams, string identity) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_EndAccess(VixDiskLibConnectParams.getCPtr(connectParams), identity);
    return ret;
  }

  public static ulong VixDiskLib_Create(global::System.IntPtr connection, string path, VixDiskLibCreateParams createParams, SWIGTYPE_p_f_p_void_int__char progressFunc, SWIGTYPE_p_void progressCallbackData) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Create(connection, path, VixDiskLibCreateParams.getCPtr(createParams), SWIGTYPE_p_f_p_void_int__char.getCPtr(progressFunc), SWIGTYPE_p_void.getCPtr(progressCallbackData));
    return ret;
  }

  public static ulong VixDiskLib_CreateChild(global::System.IntPtr diskHandle, string childPath, VixDiskLibDiskType diskType, SWIGTYPE_p_f_p_void_int__char progressFunc, SWIGTYPE_p_void progressCallbackData) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_CreateChild(diskHandle, childPath, (int)diskType, SWIGTYPE_p_f_p_void_int__char.getCPtr(progressFunc), SWIGTYPE_p_void.getCPtr(progressCallbackData));
    return ret;
  }

  public static ulong VixDiskLib_Open(global::System.IntPtr connection, string path, uint flags, out global::System.IntPtr diskHandle) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Open(connection, path, flags, out diskHandle);
    return ret;
  }

  public static ulong VixDiskLib_GetInfo(global::System.IntPtr diskHandle, SWIGTYPE_p_p_VixDiskLibInfo info) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_GetInfo(diskHandle, SWIGTYPE_p_p_VixDiskLibInfo.getCPtr(info));
    return ret;
  }

  public static void VixDiskLib_FreeInfo(VixDiskLibInfo info) {
    VixDiskLibPINVOKE.VixDiskLib_FreeInfo(VixDiskLibInfo.getCPtr(info));
  }

  public static string VixDiskLib_GetTransportMode(global::System.IntPtr diskHandle) {
    string ret = VixDiskLibPINVOKE.VixDiskLib_GetTransportMode(diskHandle);
    return ret;
  }

  public static ulong VixDiskLib_Close(global::System.IntPtr diskHandle) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Close(diskHandle);
    return ret;
  }

  public unsafe static ulong VixDiskLib_Read(global::System.IntPtr diskHandle, ulong startSector, ulong numSectors, byte[] readBuffer) {
    fixed ( byte* swig_ptrTo_readBuffer = readBuffer ) {
    {
      ulong ret = VixDiskLibPINVOKE.VixDiskLib_Read(diskHandle, startSector, numSectors, (global::System.IntPtr)swig_ptrTo_readBuffer);
      return ret;
    }
    }
  }

  public unsafe static ulong VixDiskLib_ReadAsync(global::System.IntPtr diskHandle, ulong startSector, ulong numSectors, byte[] readBuffer, SWIGTYPE_p_f_p_void_unsigned___int64__void callback, SWIGTYPE_p_void cbData) {
    fixed ( byte* swig_ptrTo_readBuffer = readBuffer ) {
    {
      ulong ret = VixDiskLibPINVOKE.VixDiskLib_ReadAsync(diskHandle, startSector, numSectors, (global::System.IntPtr)swig_ptrTo_readBuffer, SWIGTYPE_p_f_p_void_unsigned___int64__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(cbData));
      return ret;
    }
    }
  }

  public unsafe static ulong VixDiskLib_Write(global::System.IntPtr diskHandle, ulong startSector, ulong numSectors, byte[] writeBuffer) {
    fixed ( byte* swig_ptrTo_writeBuffer = writeBuffer ) {
    {
      ulong ret = VixDiskLibPINVOKE.VixDiskLib_Write(diskHandle, startSector, numSectors, (global::System.IntPtr)swig_ptrTo_writeBuffer);
      return ret;
    }
    }
  }

  public unsafe static ulong VixDiskLib_WriteAsync(global::System.IntPtr diskHandle, ulong startSector, ulong numSectors, byte[] writeBuffer, SWIGTYPE_p_f_p_void_unsigned___int64__void callback, SWIGTYPE_p_void cbData) {
    fixed ( byte* swig_ptrTo_writeBuffer = writeBuffer ) {
    {
      ulong ret = VixDiskLibPINVOKE.VixDiskLib_WriteAsync(diskHandle, startSector, numSectors, (global::System.IntPtr)swig_ptrTo_writeBuffer, SWIGTYPE_p_f_p_void_unsigned___int64__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(cbData));
      return ret;
    }
    }
  }

  public static ulong VixDiskLib_Flush(global::System.IntPtr diskHandle) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Flush(diskHandle);
    return ret;
  }

  public static ulong VixDiskLib_Wait(global::System.IntPtr diskHandle) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Wait(diskHandle);
    return ret;
  }

  public unsafe static ulong VixDiskLib_ReadMetadata(global::System.IntPtr diskHandle, string key, byte[] buf, uint bufLen, out uint requiredLen) {
    fixed ( byte* swig_ptrTo_buf = buf ) {
    {
      ulong ret = VixDiskLibPINVOKE.VixDiskLib_ReadMetadata(diskHandle, key, (global::System.IntPtr)swig_ptrTo_buf, bufLen, out requiredLen);
      return ret;
    }
    }
  }

  public static ulong VixDiskLib_WriteMetadata(global::System.IntPtr diskHandle, string key, string val) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_WriteMetadata(diskHandle, key, val);
    return ret;
  }

  public unsafe static ulong VixDiskLib_GetMetadataKeys(global::System.IntPtr diskHandle, byte[] keys, uint maxLen, out uint requiredLen) {
    fixed ( byte* swig_ptrTo_keys = keys ) {
    {
      ulong ret = VixDiskLibPINVOKE.VixDiskLib_GetMetadataKeys(diskHandle, (global::System.IntPtr)swig_ptrTo_keys, maxLen, out requiredLen);
      return ret;
    }
    }
  }

  public static ulong VixDiskLib_Unlink(global::System.IntPtr connection, string path) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Unlink(connection, path);
    return ret;
  }

  public static ulong VixDiskLib_Grow(global::System.IntPtr connection, string path, ulong capacity, char updateGeometry, SWIGTYPE_p_f_p_void_int__char progressFunc, SWIGTYPE_p_void progressCallbackData) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Grow(connection, path, capacity, updateGeometry, SWIGTYPE_p_f_p_void_int__char.getCPtr(progressFunc), SWIGTYPE_p_void.getCPtr(progressCallbackData));
    return ret;
  }

  public static ulong VixDiskLib_Shrink(global::System.IntPtr diskHandle, SWIGTYPE_p_f_p_void_int__char progressFunc, SWIGTYPE_p_void progressCallbackData) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Shrink(diskHandle, SWIGTYPE_p_f_p_void_int__char.getCPtr(progressFunc), SWIGTYPE_p_void.getCPtr(progressCallbackData));
    return ret;
  }

  public static ulong VixDiskLib_Defragment(global::System.IntPtr diskHandle, SWIGTYPE_p_f_p_void_int__char progressFunc, SWIGTYPE_p_void progressCallbackData) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Defragment(diskHandle, SWIGTYPE_p_f_p_void_int__char.getCPtr(progressFunc), SWIGTYPE_p_void.getCPtr(progressCallbackData));
    return ret;
  }

  public static ulong VixDiskLib_Rename(string srcFileName, string dstFileName) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Rename(srcFileName, dstFileName);
    return ret;
  }

  public static ulong VixDiskLib_Clone(global::System.IntPtr dstConnection, string dstPath, global::System.IntPtr srcConnection, string srcPath, VixDiskLibCreateParams vixCreateParams, SWIGTYPE_p_f_p_void_int__char progressFunc, SWIGTYPE_p_void progressCallbackData, char overWrite) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Clone(dstConnection, dstPath, srcConnection, srcPath, VixDiskLibCreateParams.getCPtr(vixCreateParams), SWIGTYPE_p_f_p_void_int__char.getCPtr(progressFunc), SWIGTYPE_p_void.getCPtr(progressCallbackData), overWrite);
    return ret;
  }

  public static string VixDiskLib_GetErrorText(ulong err, string locale) {
    string ret = VixDiskLibPINVOKE.VixDiskLib_GetErrorText(err, locale);
    return ret;
  }

  public static void VixDiskLib_FreeErrorText(string errMsg) {
    VixDiskLibPINVOKE.VixDiskLib_FreeErrorText(errMsg);
  }

  public static ulong VixDiskLib_IsAttachPossible(global::System.IntPtr parent, global::System.IntPtr child) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_IsAttachPossible(parent, child);
    return ret;
  }

  public static ulong VixDiskLib_Attach(global::System.IntPtr parent, global::System.IntPtr child) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_Attach(parent, child);
    return ret;
  }

  public static ulong VixDiskLib_SpaceNeededForClone(global::System.IntPtr diskHandle, VixDiskLibDiskType cloneDiskType, SWIGTYPE_p_unsigned___int64 spaceNeeded) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_SpaceNeededForClone(diskHandle, (int)cloneDiskType, SWIGTYPE_p_unsigned___int64.getCPtr(spaceNeeded));
    return ret;
  }

  public static ulong VixDiskLib_CheckRepair(global::System.IntPtr connection, string filename, char repair) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_CheckRepair(connection, filename, repair);
    return ret;
  }

  public static ulong VixDiskLib_GetConnectParams(global::System.IntPtr connection, SWIGTYPE_p_p_VixDiskLibConnectParams connectParams) {
    ulong ret = VixDiskLibPINVOKE.VixDiskLib_GetConnectParams(connection, SWIGTYPE_p_p_VixDiskLibConnectParams.getCPtr(connectParams));
    return ret;
  }

  public static void VixDiskLib_FreeConnectParams(VixDiskLibConnectParams connectParams) {
    VixDiskLibPINVOKE.VixDiskLib_FreeConnectParams(VixDiskLibConnectParams.getCPtr(connectParams));
  }

  public static readonly int FALSE = VixDiskLibPINVOKE.FALSE_get();
  public static readonly int TRUE = VixDiskLibPINVOKE.TRUE_get();
  public static readonly int vm_x86_64 = VixDiskLibPINVOKE.vm_x86_64_get();
  public static readonly int vm_arm_64 = VixDiskLibPINVOKE.vm_arm_64_get();
  public static readonly string FMT64 = VixDiskLibPINVOKE.FMT64_get();
  public static readonly string FMTSZ = VixDiskLibPINVOKE.FMTSZ_get();
  public static readonly string FMTPD = VixDiskLibPINVOKE.FMTPD_get();
  public static readonly string FMTH = VixDiskLibPINVOKE.FMTH_get();
  public static readonly int MAX_PPN_BITS = VixDiskLibPINVOKE.MAX_PPN_BITS_get();
  public static readonly int MPN38_MASK = VixDiskLibPINVOKE.MPN38_MASK_get();
  public static readonly string FMTLA = VixDiskLibPINVOKE.FMTLA_get();
  public static readonly string FMTVA = VixDiskLibPINVOKE.FMTVA_get();
  public static readonly string FMTVPN = VixDiskLibPINVOKE.FMTVPN_get();
  public static readonly string FMTPID = VixDiskLibPINVOKE.FMTPID_get();
  public static readonly string FMTUID = VixDiskLibPINVOKE.FMTUID_get();
  public static readonly string FMTMODE = VixDiskLibPINVOKE.FMTMODE_get();
  public static readonly string FMTTIME = VixDiskLibPINVOKE.FMTTIME_get();
  public static readonly int VIX_OK = VixDiskLibPINVOKE.VIX_OK_get();
  public static readonly int VIX_E_FAIL = VixDiskLibPINVOKE.VIX_E_FAIL_get();
  public static readonly int VIX_E_OUT_OF_MEMORY = VixDiskLibPINVOKE.VIX_E_OUT_OF_MEMORY_get();
  public static readonly int VIX_E_INVALID_ARG = VixDiskLibPINVOKE.VIX_E_INVALID_ARG_get();
  public static readonly int VIX_E_FILE_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_FILE_NOT_FOUND_get();
  public static readonly int VIX_E_OBJECT_IS_BUSY = VixDiskLibPINVOKE.VIX_E_OBJECT_IS_BUSY_get();
  public static readonly int VIX_E_NOT_SUPPORTED = VixDiskLibPINVOKE.VIX_E_NOT_SUPPORTED_get();
  public static readonly int VIX_E_FILE_ERROR = VixDiskLibPINVOKE.VIX_E_FILE_ERROR_get();
  public static readonly int VIX_E_DISK_FULL = VixDiskLibPINVOKE.VIX_E_DISK_FULL_get();
  public static readonly int VIX_E_INCORRECT_FILE_TYPE = VixDiskLibPINVOKE.VIX_E_INCORRECT_FILE_TYPE_get();
  public static readonly int VIX_E_CANCELLED = VixDiskLibPINVOKE.VIX_E_CANCELLED_get();
  public static readonly int VIX_E_FILE_READ_ONLY = VixDiskLibPINVOKE.VIX_E_FILE_READ_ONLY_get();
  public static readonly int VIX_E_FILE_ALREADY_EXISTS = VixDiskLibPINVOKE.VIX_E_FILE_ALREADY_EXISTS_get();
  public static readonly int VIX_E_FILE_ACCESS_ERROR = VixDiskLibPINVOKE.VIX_E_FILE_ACCESS_ERROR_get();
  public static readonly int VIX_E_REQUIRES_LARGE_FILES = VixDiskLibPINVOKE.VIX_E_REQUIRES_LARGE_FILES_get();
  public static readonly int VIX_E_FILE_ALREADY_LOCKED = VixDiskLibPINVOKE.VIX_E_FILE_ALREADY_LOCKED_get();
  public static readonly int VIX_E_VMDB = VixDiskLibPINVOKE.VIX_E_VMDB_get();
  public static readonly int VIX_E_NOT_SUPPORTED_ON_REMOTE_OBJECT = VixDiskLibPINVOKE.VIX_E_NOT_SUPPORTED_ON_REMOTE_OBJECT_get();
  public static readonly int VIX_E_FILE_TOO_BIG = VixDiskLibPINVOKE.VIX_E_FILE_TOO_BIG_get();
  public static readonly int VIX_E_FILE_NAME_INVALID = VixDiskLibPINVOKE.VIX_E_FILE_NAME_INVALID_get();
  public static readonly int VIX_E_ALREADY_EXISTS = VixDiskLibPINVOKE.VIX_E_ALREADY_EXISTS_get();
  public static readonly int VIX_E_BUFFER_TOOSMALL = VixDiskLibPINVOKE.VIX_E_BUFFER_TOOSMALL_get();
  public static readonly int VIX_E_OBJECT_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_OBJECT_NOT_FOUND_get();
  public static readonly int VIX_E_HOST_NOT_CONNECTED = VixDiskLibPINVOKE.VIX_E_HOST_NOT_CONNECTED_get();
  public static readonly int VIX_E_INVALID_UTF8_STRING = VixDiskLibPINVOKE.VIX_E_INVALID_UTF8_STRING_get();
  public static readonly int VIX_E_OPERATION_ALREADY_IN_PROGRESS = VixDiskLibPINVOKE.VIX_E_OPERATION_ALREADY_IN_PROGRESS_get();
  public static readonly int VIX_E_UNFINISHED_JOB = VixDiskLibPINVOKE.VIX_E_UNFINISHED_JOB_get();
  public static readonly int VIX_E_NEED_KEY = VixDiskLibPINVOKE.VIX_E_NEED_KEY_get();
  public static readonly int VIX_E_LICENSE = VixDiskLibPINVOKE.VIX_E_LICENSE_get();
  public static readonly int VIX_E_VM_HOST_DISCONNECTED = VixDiskLibPINVOKE.VIX_E_VM_HOST_DISCONNECTED_get();
  public static readonly int VIX_E_AUTHENTICATION_FAIL = VixDiskLibPINVOKE.VIX_E_AUTHENTICATION_FAIL_get();
  public static readonly int VIX_E_HOST_CONNECTION_LOST = VixDiskLibPINVOKE.VIX_E_HOST_CONNECTION_LOST_get();
  public static readonly int VIX_E_DUPLICATE_NAME = VixDiskLibPINVOKE.VIX_E_DUPLICATE_NAME_get();
  public static readonly int VIX_E_ARGUMENT_TOO_BIG = VixDiskLibPINVOKE.VIX_E_ARGUMENT_TOO_BIG_get();
  public static readonly int VIX_E_INVALID_HANDLE = VixDiskLibPINVOKE.VIX_E_INVALID_HANDLE_get();
  public static readonly int VIX_E_NOT_SUPPORTED_ON_HANDLE_TYPE = VixDiskLibPINVOKE.VIX_E_NOT_SUPPORTED_ON_HANDLE_TYPE_get();
  public static readonly int VIX_E_TOO_MANY_HANDLES = VixDiskLibPINVOKE.VIX_E_TOO_MANY_HANDLES_get();
  public static readonly int VIX_E_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_NOT_FOUND_get();
  public static readonly int VIX_E_TYPE_MISMATCH = VixDiskLibPINVOKE.VIX_E_TYPE_MISMATCH_get();
  public static readonly int VIX_E_INVALID_XML = VixDiskLibPINVOKE.VIX_E_INVALID_XML_get();
  public static readonly int VIX_E_TIMEOUT_WAITING_FOR_TOOLS = VixDiskLibPINVOKE.VIX_E_TIMEOUT_WAITING_FOR_TOOLS_get();
  public static readonly int VIX_E_UNRECOGNIZED_COMMAND = VixDiskLibPINVOKE.VIX_E_UNRECOGNIZED_COMMAND_get();
  public static readonly int VIX_E_OP_NOT_SUPPORTED_ON_GUEST = VixDiskLibPINVOKE.VIX_E_OP_NOT_SUPPORTED_ON_GUEST_get();
  public static readonly int VIX_E_PROGRAM_NOT_STARTED = VixDiskLibPINVOKE.VIX_E_PROGRAM_NOT_STARTED_get();
  public static readonly int VIX_E_CANNOT_START_READ_ONLY_VM = VixDiskLibPINVOKE.VIX_E_CANNOT_START_READ_ONLY_VM_get();
  public static readonly int VIX_E_VM_NOT_RUNNING = VixDiskLibPINVOKE.VIX_E_VM_NOT_RUNNING_get();
  public static readonly int VIX_E_VM_IS_RUNNING = VixDiskLibPINVOKE.VIX_E_VM_IS_RUNNING_get();
  public static readonly int VIX_E_CANNOT_CONNECT_TO_VM = VixDiskLibPINVOKE.VIX_E_CANNOT_CONNECT_TO_VM_get();
  public static readonly int VIX_E_POWEROP_SCRIPTS_NOT_AVAILABLE = VixDiskLibPINVOKE.VIX_E_POWEROP_SCRIPTS_NOT_AVAILABLE_get();
  public static readonly int VIX_E_NO_GUEST_OS_INSTALLED = VixDiskLibPINVOKE.VIX_E_NO_GUEST_OS_INSTALLED_get();
  public static readonly int VIX_E_VM_INSUFFICIENT_HOST_MEMORY = VixDiskLibPINVOKE.VIX_E_VM_INSUFFICIENT_HOST_MEMORY_get();
  public static readonly int VIX_E_SUSPEND_ERROR = VixDiskLibPINVOKE.VIX_E_SUSPEND_ERROR_get();
  public static readonly int VIX_E_VM_NOT_ENOUGH_CPUS = VixDiskLibPINVOKE.VIX_E_VM_NOT_ENOUGH_CPUS_get();
  public static readonly int VIX_E_HOST_USER_PERMISSIONS = VixDiskLibPINVOKE.VIX_E_HOST_USER_PERMISSIONS_get();
  public static readonly int VIX_E_GUEST_USER_PERMISSIONS = VixDiskLibPINVOKE.VIX_E_GUEST_USER_PERMISSIONS_get();
  public static readonly int VIX_E_TOOLS_NOT_RUNNING = VixDiskLibPINVOKE.VIX_E_TOOLS_NOT_RUNNING_get();
  public static readonly int VIX_E_GUEST_OPERATIONS_PROHIBITED = VixDiskLibPINVOKE.VIX_E_GUEST_OPERATIONS_PROHIBITED_get();
  public static readonly int VIX_E_ANON_GUEST_OPERATIONS_PROHIBITED = VixDiskLibPINVOKE.VIX_E_ANON_GUEST_OPERATIONS_PROHIBITED_get();
  public static readonly int VIX_E_ROOT_GUEST_OPERATIONS_PROHIBITED = VixDiskLibPINVOKE.VIX_E_ROOT_GUEST_OPERATIONS_PROHIBITED_get();
  public static readonly int VIX_E_MISSING_ANON_GUEST_ACCOUNT = VixDiskLibPINVOKE.VIX_E_MISSING_ANON_GUEST_ACCOUNT_get();
  public static readonly int VIX_E_CANNOT_AUTHENTICATE_WITH_GUEST = VixDiskLibPINVOKE.VIX_E_CANNOT_AUTHENTICATE_WITH_GUEST_get();
  public static readonly int VIX_E_UNRECOGNIZED_COMMAND_IN_GUEST = VixDiskLibPINVOKE.VIX_E_UNRECOGNIZED_COMMAND_IN_GUEST_get();
  public static readonly int VIX_E_CONSOLE_GUEST_OPERATIONS_PROHIBITED = VixDiskLibPINVOKE.VIX_E_CONSOLE_GUEST_OPERATIONS_PROHIBITED_get();
  public static readonly int VIX_E_MUST_BE_CONSOLE_USER = VixDiskLibPINVOKE.VIX_E_MUST_BE_CONSOLE_USER_get();
  public static readonly int VIX_E_VMX_MSG_DIALOG_AND_NO_UI = VixDiskLibPINVOKE.VIX_E_VMX_MSG_DIALOG_AND_NO_UI_get();
  public static readonly int VIX_E_OPERATION_NOT_ALLOWED_FOR_LOGIN_TYPE = VixDiskLibPINVOKE.VIX_E_OPERATION_NOT_ALLOWED_FOR_LOGIN_TYPE_get();
  public static readonly int VIX_E_LOGIN_TYPE_NOT_SUPPORTED = VixDiskLibPINVOKE.VIX_E_LOGIN_TYPE_NOT_SUPPORTED_get();
  public static readonly int VIX_E_EMPTY_PASSWORD_NOT_ALLOWED_IN_GUEST = VixDiskLibPINVOKE.VIX_E_EMPTY_PASSWORD_NOT_ALLOWED_IN_GUEST_get();
  public static readonly int VIX_E_INTERACTIVE_SESSION_NOT_PRESENT = VixDiskLibPINVOKE.VIX_E_INTERACTIVE_SESSION_NOT_PRESENT_get();
  public static readonly int VIX_E_INTERACTIVE_SESSION_USER_MISMATCH = VixDiskLibPINVOKE.VIX_E_INTERACTIVE_SESSION_USER_MISMATCH_get();
  public static readonly int VIX_E_CANNOT_POWER_ON_VM = VixDiskLibPINVOKE.VIX_E_CANNOT_POWER_ON_VM_get();
  public static readonly int VIX_E_NO_DISPLAY_SERVER = VixDiskLibPINVOKE.VIX_E_NO_DISPLAY_SERVER_get();
  public static readonly int VIX_E_TOO_MANY_LOGONS = VixDiskLibPINVOKE.VIX_E_TOO_MANY_LOGONS_get();
  public static readonly int VIX_E_INVALID_AUTHENTICATION_SESSION = VixDiskLibPINVOKE.VIX_E_INVALID_AUTHENTICATION_SESSION_get();
  public static readonly int VIX_E_VM_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_VM_NOT_FOUND_get();
  public static readonly int VIX_E_NOT_SUPPORTED_FOR_VM_VERSION = VixDiskLibPINVOKE.VIX_E_NOT_SUPPORTED_FOR_VM_VERSION_get();
  public static readonly int VIX_E_CANNOT_READ_VM_CONFIG = VixDiskLibPINVOKE.VIX_E_CANNOT_READ_VM_CONFIG_get();
  public static readonly int VIX_E_TEMPLATE_VM = VixDiskLibPINVOKE.VIX_E_TEMPLATE_VM_get();
  public static readonly int VIX_E_VM_ALREADY_LOADED = VixDiskLibPINVOKE.VIX_E_VM_ALREADY_LOADED_get();
  public static readonly int VIX_E_VM_ALREADY_UP_TO_DATE = VixDiskLibPINVOKE.VIX_E_VM_ALREADY_UP_TO_DATE_get();
  public static readonly int VIX_E_VM_UNSUPPORTED_GUEST = VixDiskLibPINVOKE.VIX_E_VM_UNSUPPORTED_GUEST_get();
  public static readonly int VIX_E_UNRECOGNIZED_PROPERTY = VixDiskLibPINVOKE.VIX_E_UNRECOGNIZED_PROPERTY_get();
  public static readonly int VIX_E_INVALID_PROPERTY_VALUE = VixDiskLibPINVOKE.VIX_E_INVALID_PROPERTY_VALUE_get();
  public static readonly int VIX_E_READ_ONLY_PROPERTY = VixDiskLibPINVOKE.VIX_E_READ_ONLY_PROPERTY_get();
  public static readonly int VIX_E_MISSING_REQUIRED_PROPERTY = VixDiskLibPINVOKE.VIX_E_MISSING_REQUIRED_PROPERTY_get();
  public static readonly int VIX_E_INVALID_SERIALIZED_DATA = VixDiskLibPINVOKE.VIX_E_INVALID_SERIALIZED_DATA_get();
  public static readonly int VIX_E_PROPERTY_TYPE_MISMATCH = VixDiskLibPINVOKE.VIX_E_PROPERTY_TYPE_MISMATCH_get();
  public static readonly int VIX_E_BAD_VM_INDEX = VixDiskLibPINVOKE.VIX_E_BAD_VM_INDEX_get();
  public static readonly int VIX_E_INVALID_MESSAGE_HEADER = VixDiskLibPINVOKE.VIX_E_INVALID_MESSAGE_HEADER_get();
  public static readonly int VIX_E_INVALID_MESSAGE_BODY = VixDiskLibPINVOKE.VIX_E_INVALID_MESSAGE_BODY_get();
  public static readonly int VIX_E_SNAPSHOT_INVAL = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_INVAL_get();
  public static readonly int VIX_E_SNAPSHOT_DUMPER = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_DUMPER_get();
  public static readonly int VIX_E_SNAPSHOT_DISKLIB = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_DISKLIB_get();
  public static readonly int VIX_E_SNAPSHOT_NOTFOUND = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_NOTFOUND_get();
  public static readonly int VIX_E_SNAPSHOT_EXISTS = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_EXISTS_get();
  public static readonly int VIX_E_SNAPSHOT_VERSION = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_VERSION_get();
  public static readonly int VIX_E_SNAPSHOT_NOPERM = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_NOPERM_get();
  public static readonly int VIX_E_SNAPSHOT_CONFIG = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_CONFIG_get();
  public static readonly int VIX_E_SNAPSHOT_NOCHANGE = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_NOCHANGE_get();
  public static readonly int VIX_E_SNAPSHOT_CHECKPOINT = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_CHECKPOINT_get();
  public static readonly int VIX_E_SNAPSHOT_LOCKED = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_LOCKED_get();
  public static readonly int VIX_E_SNAPSHOT_INCONSISTENT = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_INCONSISTENT_get();
  public static readonly int VIX_E_SNAPSHOT_NAMETOOLONG = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_NAMETOOLONG_get();
  public static readonly int VIX_E_SNAPSHOT_VIXFILE = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_VIXFILE_get();
  public static readonly int VIX_E_SNAPSHOT_DISKLOCKED = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_DISKLOCKED_get();
  public static readonly int VIX_E_SNAPSHOT_DUPLICATEDDISK = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_DUPLICATEDDISK_get();
  public static readonly int VIX_E_SNAPSHOT_INDEPENDENTDISK = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_INDEPENDENTDISK_get();
  public static readonly int VIX_E_SNAPSHOT_NONUNIQUE_NAME = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_NONUNIQUE_NAME_get();
  public static readonly int VIX_E_SNAPSHOT_MEMORY_ON_INDEPENDENT_DISK = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_MEMORY_ON_INDEPENDENT_DISK_get();
  public static readonly int VIX_E_SNAPSHOT_MAXSNAPSHOTS = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_MAXSNAPSHOTS_get();
  public static readonly int VIX_E_SNAPSHOT_MIN_FREE_SPACE = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_MIN_FREE_SPACE_get();
  public static readonly int VIX_E_SNAPSHOT_HIERARCHY_TOODEEP = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_HIERARCHY_TOODEEP_get();
  public static readonly int VIX_E_SNAPSHOT_NOT_REVERTABLE = VixDiskLibPINVOKE.VIX_E_SNAPSHOT_NOT_REVERTABLE_get();
  public static readonly int VIX_E_HOST_DISK_INVALID_VALUE = VixDiskLibPINVOKE.VIX_E_HOST_DISK_INVALID_VALUE_get();
  public static readonly int VIX_E_HOST_DISK_SECTORSIZE = VixDiskLibPINVOKE.VIX_E_HOST_DISK_SECTORSIZE_get();
  public static readonly int VIX_E_HOST_FILE_ERROR_EOF = VixDiskLibPINVOKE.VIX_E_HOST_FILE_ERROR_EOF_get();
  public static readonly int VIX_E_HOST_NETBLKDEV_HANDSHAKE = VixDiskLibPINVOKE.VIX_E_HOST_NETBLKDEV_HANDSHAKE_get();
  public static readonly int VIX_E_HOST_SOCKET_CREATION_ERROR = VixDiskLibPINVOKE.VIX_E_HOST_SOCKET_CREATION_ERROR_get();
  public static readonly int VIX_E_HOST_SERVER_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_HOST_SERVER_NOT_FOUND_get();
  public static readonly int VIX_E_HOST_NETWORK_CONN_REFUSED = VixDiskLibPINVOKE.VIX_E_HOST_NETWORK_CONN_REFUSED_get();
  public static readonly int VIX_E_HOST_TCP_SOCKET_ERROR = VixDiskLibPINVOKE.VIX_E_HOST_TCP_SOCKET_ERROR_get();
  public static readonly int VIX_E_HOST_TCP_CONN_LOST = VixDiskLibPINVOKE.VIX_E_HOST_TCP_CONN_LOST_get();
  public static readonly int VIX_E_HOST_NBD_HASHFILE_VOLUME = VixDiskLibPINVOKE.VIX_E_HOST_NBD_HASHFILE_VOLUME_get();
  public static readonly int VIX_E_HOST_NBD_HASHFILE_INIT = VixDiskLibPINVOKE.VIX_E_HOST_NBD_HASHFILE_INIT_get();
  public static readonly int VIX_E_DISK_INVAL = VixDiskLibPINVOKE.VIX_E_DISK_INVAL_get();
  public static readonly int VIX_E_DISK_NOINIT = VixDiskLibPINVOKE.VIX_E_DISK_NOINIT_get();
  public static readonly int VIX_E_DISK_NOIO = VixDiskLibPINVOKE.VIX_E_DISK_NOIO_get();
  public static readonly int VIX_E_DISK_PARTIALCHAIN = VixDiskLibPINVOKE.VIX_E_DISK_PARTIALCHAIN_get();
  public static readonly int VIX_E_DISK_NEEDSREPAIR = VixDiskLibPINVOKE.VIX_E_DISK_NEEDSREPAIR_get();
  public static readonly int VIX_E_DISK_OUTOFRANGE = VixDiskLibPINVOKE.VIX_E_DISK_OUTOFRANGE_get();
  public static readonly int VIX_E_DISK_CID_MISMATCH = VixDiskLibPINVOKE.VIX_E_DISK_CID_MISMATCH_get();
  public static readonly int VIX_E_DISK_CANTSHRINK = VixDiskLibPINVOKE.VIX_E_DISK_CANTSHRINK_get();
  public static readonly int VIX_E_DISK_PARTMISMATCH = VixDiskLibPINVOKE.VIX_E_DISK_PARTMISMATCH_get();
  public static readonly int VIX_E_DISK_UNSUPPORTEDDISKVERSION = VixDiskLibPINVOKE.VIX_E_DISK_UNSUPPORTEDDISKVERSION_get();
  public static readonly int VIX_E_DISK_OPENPARENT = VixDiskLibPINVOKE.VIX_E_DISK_OPENPARENT_get();
  public static readonly int VIX_E_DISK_NOTSUPPORTED = VixDiskLibPINVOKE.VIX_E_DISK_NOTSUPPORTED_get();
  public static readonly int VIX_E_DISK_NEEDKEY = VixDiskLibPINVOKE.VIX_E_DISK_NEEDKEY_get();
  public static readonly int VIX_E_DISK_NOKEYOVERRIDE = VixDiskLibPINVOKE.VIX_E_DISK_NOKEYOVERRIDE_get();
  public static readonly int VIX_E_DISK_NOTENCRYPTED = VixDiskLibPINVOKE.VIX_E_DISK_NOTENCRYPTED_get();
  public static readonly int VIX_E_DISK_NOKEY = VixDiskLibPINVOKE.VIX_E_DISK_NOKEY_get();
  public static readonly int VIX_E_DISK_INVALIDPARTITIONTABLE = VixDiskLibPINVOKE.VIX_E_DISK_INVALIDPARTITIONTABLE_get();
  public static readonly int VIX_E_DISK_NOTNORMAL = VixDiskLibPINVOKE.VIX_E_DISK_NOTNORMAL_get();
  public static readonly int VIX_E_DISK_NOTENCDESC = VixDiskLibPINVOKE.VIX_E_DISK_NOTENCDESC_get();
  public static readonly int VIX_E_DISK_NEEDVMFS = VixDiskLibPINVOKE.VIX_E_DISK_NEEDVMFS_get();
  public static readonly int VIX_E_DISK_RAWTOOBIG = VixDiskLibPINVOKE.VIX_E_DISK_RAWTOOBIG_get();
  public static readonly int VIX_E_DISK_TOOMANYOPENFILES = VixDiskLibPINVOKE.VIX_E_DISK_TOOMANYOPENFILES_get();
  public static readonly int VIX_E_DISK_TOOMANYREDO = VixDiskLibPINVOKE.VIX_E_DISK_TOOMANYREDO_get();
  public static readonly int VIX_E_DISK_RAWTOOSMALL = VixDiskLibPINVOKE.VIX_E_DISK_RAWTOOSMALL_get();
  public static readonly int VIX_E_DISK_INVALIDCHAIN = VixDiskLibPINVOKE.VIX_E_DISK_INVALIDCHAIN_get();
  public static readonly int VIX_E_DISK_KEY_NOTFOUND = VixDiskLibPINVOKE.VIX_E_DISK_KEY_NOTFOUND_get();
  public static readonly int VIX_E_DISK_SUBSYSTEM_INIT_FAIL = VixDiskLibPINVOKE.VIX_E_DISK_SUBSYSTEM_INIT_FAIL_get();
  public static readonly int VIX_E_DISK_INVALID_CONNECTION = VixDiskLibPINVOKE.VIX_E_DISK_INVALID_CONNECTION_get();
  public static readonly int VIX_E_DISK_ENCODING = VixDiskLibPINVOKE.VIX_E_DISK_ENCODING_get();
  public static readonly int VIX_E_DISK_CANTREPAIR = VixDiskLibPINVOKE.VIX_E_DISK_CANTREPAIR_get();
  public static readonly int VIX_E_DISK_INVALIDDISK = VixDiskLibPINVOKE.VIX_E_DISK_INVALIDDISK_get();
  public static readonly int VIX_E_DISK_NOLICENSE = VixDiskLibPINVOKE.VIX_E_DISK_NOLICENSE_get();
  public static readonly int VIX_E_DISK_NODEVICE = VixDiskLibPINVOKE.VIX_E_DISK_NODEVICE_get();
  public static readonly int VIX_E_DISK_UNSUPPORTEDDEVICE = VixDiskLibPINVOKE.VIX_E_DISK_UNSUPPORTEDDEVICE_get();
  public static readonly int VIX_E_DISK_CAPACITY_MISMATCH = VixDiskLibPINVOKE.VIX_E_DISK_CAPACITY_MISMATCH_get();
  public static readonly int VIX_E_DISK_PARENT_NOTALLOWED = VixDiskLibPINVOKE.VIX_E_DISK_PARENT_NOTALLOWED_get();
  public static readonly int VIX_E_DISK_ATTACH_ROOTLINK = VixDiskLibPINVOKE.VIX_E_DISK_ATTACH_ROOTLINK_get();
  public static readonly int VIX_E_CRYPTO_UNKNOWN_ALGORITHM = VixDiskLibPINVOKE.VIX_E_CRYPTO_UNKNOWN_ALGORITHM_get();
  public static readonly int VIX_E_CRYPTO_BAD_BUFFER_SIZE = VixDiskLibPINVOKE.VIX_E_CRYPTO_BAD_BUFFER_SIZE_get();
  public static readonly int VIX_E_CRYPTO_INVALID_OPERATION = VixDiskLibPINVOKE.VIX_E_CRYPTO_INVALID_OPERATION_get();
  public static readonly int VIX_E_CRYPTO_RANDOM_DEVICE = VixDiskLibPINVOKE.VIX_E_CRYPTO_RANDOM_DEVICE_get();
  public static readonly int VIX_E_CRYPTO_NEED_PASSWORD = VixDiskLibPINVOKE.VIX_E_CRYPTO_NEED_PASSWORD_get();
  public static readonly int VIX_E_CRYPTO_BAD_PASSWORD = VixDiskLibPINVOKE.VIX_E_CRYPTO_BAD_PASSWORD_get();
  public static readonly int VIX_E_CRYPTO_NOT_IN_DICTIONARY = VixDiskLibPINVOKE.VIX_E_CRYPTO_NOT_IN_DICTIONARY_get();
  public static readonly int VIX_E_CRYPTO_NO_CRYPTO = VixDiskLibPINVOKE.VIX_E_CRYPTO_NO_CRYPTO_get();
  public static readonly int VIX_E_CRYPTO_ERROR = VixDiskLibPINVOKE.VIX_E_CRYPTO_ERROR_get();
  public static readonly int VIX_E_CRYPTO_BAD_FORMAT = VixDiskLibPINVOKE.VIX_E_CRYPTO_BAD_FORMAT_get();
  public static readonly int VIX_E_CRYPTO_LOCKED = VixDiskLibPINVOKE.VIX_E_CRYPTO_LOCKED_get();
  public static readonly int VIX_E_CRYPTO_EMPTY = VixDiskLibPINVOKE.VIX_E_CRYPTO_EMPTY_get();
  public static readonly int VIX_E_CRYPTO_KEYSAFE_LOCATOR = VixDiskLibPINVOKE.VIX_E_CRYPTO_KEYSAFE_LOCATOR_get();
  public static readonly int VIX_E_CANNOT_CONNECT_TO_HOST = VixDiskLibPINVOKE.VIX_E_CANNOT_CONNECT_TO_HOST_get();
  public static readonly int VIX_E_NOT_FOR_REMOTE_HOST = VixDiskLibPINVOKE.VIX_E_NOT_FOR_REMOTE_HOST_get();
  public static readonly int VIX_E_INVALID_HOSTNAME_SPECIFICATION = VixDiskLibPINVOKE.VIX_E_INVALID_HOSTNAME_SPECIFICATION_get();
  public static readonly int VIX_E_SCREEN_CAPTURE_ERROR = VixDiskLibPINVOKE.VIX_E_SCREEN_CAPTURE_ERROR_get();
  public static readonly int VIX_E_SCREEN_CAPTURE_BAD_FORMAT = VixDiskLibPINVOKE.VIX_E_SCREEN_CAPTURE_BAD_FORMAT_get();
  public static readonly int VIX_E_SCREEN_CAPTURE_COMPRESSION_FAIL = VixDiskLibPINVOKE.VIX_E_SCREEN_CAPTURE_COMPRESSION_FAIL_get();
  public static readonly int VIX_E_SCREEN_CAPTURE_LARGE_DATA = VixDiskLibPINVOKE.VIX_E_SCREEN_CAPTURE_LARGE_DATA_get();
  public static readonly int VIX_E_GUEST_VOLUMES_NOT_FROZEN = VixDiskLibPINVOKE.VIX_E_GUEST_VOLUMES_NOT_FROZEN_get();
  public static readonly int VIX_E_NOT_A_FILE = VixDiskLibPINVOKE.VIX_E_NOT_A_FILE_get();
  public static readonly int VIX_E_NOT_A_DIRECTORY = VixDiskLibPINVOKE.VIX_E_NOT_A_DIRECTORY_get();
  public static readonly int VIX_E_NO_SUCH_PROCESS = VixDiskLibPINVOKE.VIX_E_NO_SUCH_PROCESS_get();
  public static readonly int VIX_E_FILE_NAME_TOO_LONG = VixDiskLibPINVOKE.VIX_E_FILE_NAME_TOO_LONG_get();
  public static readonly int VIX_E_OPERATION_DISABLED = VixDiskLibPINVOKE.VIX_E_OPERATION_DISABLED_get();
  public static readonly int VIX_E_TOOLS_INSTALL_NO_IMAGE = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_NO_IMAGE_get();
  public static readonly int VIX_E_TOOLS_INSTALL_IMAGE_INACCESIBLE = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_IMAGE_INACCESIBLE_get();
  public static readonly int VIX_E_TOOLS_INSTALL_NO_DEVICE = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_NO_DEVICE_get();
  public static readonly int VIX_E_TOOLS_INSTALL_DEVICE_NOT_CONNECTED = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_DEVICE_NOT_CONNECTED_get();
  public static readonly int VIX_E_TOOLS_INSTALL_CANCELLED = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_CANCELLED_get();
  public static readonly int VIX_E_TOOLS_INSTALL_INIT_FAILED = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_INIT_FAILED_get();
  public static readonly int VIX_E_TOOLS_INSTALL_AUTO_NOT_SUPPORTED = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_AUTO_NOT_SUPPORTED_get();
  public static readonly int VIX_E_TOOLS_INSTALL_GUEST_NOT_READY = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_GUEST_NOT_READY_get();
  public static readonly int VIX_E_TOOLS_INSTALL_SIG_CHECK_FAILED = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_SIG_CHECK_FAILED_get();
  public static readonly int VIX_E_TOOLS_INSTALL_ERROR = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_ERROR_get();
  public static readonly int VIX_E_TOOLS_INSTALL_ALREADY_UP_TO_DATE = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_ALREADY_UP_TO_DATE_get();
  public static readonly int VIX_E_TOOLS_INSTALL_IN_PROGRESS = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_IN_PROGRESS_get();
  public static readonly int VIX_E_TOOLS_INSTALL_IMAGE_COPY_FAILED = VixDiskLibPINVOKE.VIX_E_TOOLS_INSTALL_IMAGE_COPY_FAILED_get();
  public static readonly int VIX_E_WRAPPER_WORKSTATION_NOT_INSTALLED = VixDiskLibPINVOKE.VIX_E_WRAPPER_WORKSTATION_NOT_INSTALLED_get();
  public static readonly int VIX_E_WRAPPER_VERSION_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_WRAPPER_VERSION_NOT_FOUND_get();
  public static readonly int VIX_E_WRAPPER_SERVICEPROVIDER_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_WRAPPER_SERVICEPROVIDER_NOT_FOUND_get();
  public static readonly int VIX_E_WRAPPER_PLAYER_NOT_INSTALLED = VixDiskLibPINVOKE.VIX_E_WRAPPER_PLAYER_NOT_INSTALLED_get();
  public static readonly int VIX_E_WRAPPER_RUNTIME_NOT_INSTALLED = VixDiskLibPINVOKE.VIX_E_WRAPPER_RUNTIME_NOT_INSTALLED_get();
  public static readonly int VIX_E_WRAPPER_MULTIPLE_SERVICEPROVIDERS = VixDiskLibPINVOKE.VIX_E_WRAPPER_MULTIPLE_SERVICEPROVIDERS_get();
  public static readonly int VIX_E_MNTAPI_MOUNTPT_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_MNTAPI_MOUNTPT_NOT_FOUND_get();
  public static readonly int VIX_E_MNTAPI_MOUNTPT_IN_USE = VixDiskLibPINVOKE.VIX_E_MNTAPI_MOUNTPT_IN_USE_get();
  public static readonly int VIX_E_MNTAPI_DISK_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_MNTAPI_DISK_NOT_FOUND_get();
  public static readonly int VIX_E_MNTAPI_DISK_NOT_MOUNTED = VixDiskLibPINVOKE.VIX_E_MNTAPI_DISK_NOT_MOUNTED_get();
  public static readonly int VIX_E_MNTAPI_DISK_IS_MOUNTED = VixDiskLibPINVOKE.VIX_E_MNTAPI_DISK_IS_MOUNTED_get();
  public static readonly int VIX_E_MNTAPI_DISK_NOT_SAFE = VixDiskLibPINVOKE.VIX_E_MNTAPI_DISK_NOT_SAFE_get();
  public static readonly int VIX_E_MNTAPI_DISK_CANT_OPEN = VixDiskLibPINVOKE.VIX_E_MNTAPI_DISK_CANT_OPEN_get();
  public static readonly int VIX_E_MNTAPI_CANT_READ_PARTS = VixDiskLibPINVOKE.VIX_E_MNTAPI_CANT_READ_PARTS_get();
  public static readonly int VIX_E_MNTAPI_UMOUNT_APP_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_MNTAPI_UMOUNT_APP_NOT_FOUND_get();
  public static readonly int VIX_E_MNTAPI_UMOUNT = VixDiskLibPINVOKE.VIX_E_MNTAPI_UMOUNT_get();
  public static readonly int VIX_E_MNTAPI_NO_MOUNTABLE_PARTITONS = VixDiskLibPINVOKE.VIX_E_MNTAPI_NO_MOUNTABLE_PARTITONS_get();
  public static readonly int VIX_E_MNTAPI_PARTITION_RANGE = VixDiskLibPINVOKE.VIX_E_MNTAPI_PARTITION_RANGE_get();
  public static readonly int VIX_E_MNTAPI_PERM = VixDiskLibPINVOKE.VIX_E_MNTAPI_PERM_get();
  public static readonly int VIX_E_MNTAPI_DICT = VixDiskLibPINVOKE.VIX_E_MNTAPI_DICT_get();
  public static readonly int VIX_E_MNTAPI_DICT_LOCKED = VixDiskLibPINVOKE.VIX_E_MNTAPI_DICT_LOCKED_get();
  public static readonly int VIX_E_MNTAPI_OPEN_HANDLES = VixDiskLibPINVOKE.VIX_E_MNTAPI_OPEN_HANDLES_get();
  public static readonly int VIX_E_MNTAPI_CANT_MAKE_VAR_DIR = VixDiskLibPINVOKE.VIX_E_MNTAPI_CANT_MAKE_VAR_DIR_get();
  public static readonly int VIX_E_MNTAPI_NO_ROOT = VixDiskLibPINVOKE.VIX_E_MNTAPI_NO_ROOT_get();
  public static readonly int VIX_E_MNTAPI_LOOP_FAILED = VixDiskLibPINVOKE.VIX_E_MNTAPI_LOOP_FAILED_get();
  public static readonly int VIX_E_MNTAPI_DAEMON = VixDiskLibPINVOKE.VIX_E_MNTAPI_DAEMON_get();
  public static readonly int VIX_E_MNTAPI_INTERNAL = VixDiskLibPINVOKE.VIX_E_MNTAPI_INTERNAL_get();
  public static readonly int VIX_E_MNTAPI_SYSTEM = VixDiskLibPINVOKE.VIX_E_MNTAPI_SYSTEM_get();
  public static readonly int VIX_E_MNTAPI_NO_CONNECTION_DETAILS = VixDiskLibPINVOKE.VIX_E_MNTAPI_NO_CONNECTION_DETAILS_get();
  public static readonly int VIX_E_MNTAPI_INCOMPATIBLE_VERSION = VixDiskLibPINVOKE.VIX_E_MNTAPI_INCOMPATIBLE_VERSION_get();
  public static readonly int VIX_E_MNTAPI_OS_ERROR = VixDiskLibPINVOKE.VIX_E_MNTAPI_OS_ERROR_get();
  public static readonly int VIX_E_MNTAPI_DRIVE_LETTER_IN_USE = VixDiskLibPINVOKE.VIX_E_MNTAPI_DRIVE_LETTER_IN_USE_get();
  public static readonly int VIX_E_MNTAPI_DRIVE_LETTER_ALREADY_ASSIGNED = VixDiskLibPINVOKE.VIX_E_MNTAPI_DRIVE_LETTER_ALREADY_ASSIGNED_get();
  public static readonly int VIX_E_MNTAPI_VOLUME_NOT_MOUNTED = VixDiskLibPINVOKE.VIX_E_MNTAPI_VOLUME_NOT_MOUNTED_get();
  public static readonly int VIX_E_MNTAPI_VOLUME_ALREADY_MOUNTED = VixDiskLibPINVOKE.VIX_E_MNTAPI_VOLUME_ALREADY_MOUNTED_get();
  public static readonly int VIX_E_MNTAPI_FORMAT_FAILURE = VixDiskLibPINVOKE.VIX_E_MNTAPI_FORMAT_FAILURE_get();
  public static readonly int VIX_E_MNTAPI_NO_DRIVER = VixDiskLibPINVOKE.VIX_E_MNTAPI_NO_DRIVER_get();
  public static readonly int VIX_E_MNTAPI_ALREADY_OPENED = VixDiskLibPINVOKE.VIX_E_MNTAPI_ALREADY_OPENED_get();
  public static readonly int VIX_E_MNTAPI_ITEM_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_MNTAPI_ITEM_NOT_FOUND_get();
  public static readonly int VIX_E_MNTAPI_UNSUPPROTED_BOOT_LOADER = VixDiskLibPINVOKE.VIX_E_MNTAPI_UNSUPPROTED_BOOT_LOADER_get();
  public static readonly int VIX_E_MNTAPI_UNSUPPROTED_OS = VixDiskLibPINVOKE.VIX_E_MNTAPI_UNSUPPROTED_OS_get();
  public static readonly int VIX_E_MNTAPI_CODECONVERSION = VixDiskLibPINVOKE.VIX_E_MNTAPI_CODECONVERSION_get();
  public static readonly int VIX_E_MNTAPI_REGWRITE_ERROR = VixDiskLibPINVOKE.VIX_E_MNTAPI_REGWRITE_ERROR_get();
  public static readonly int VIX_E_MNTAPI_UNSUPPORTED_FT_VOLUME = VixDiskLibPINVOKE.VIX_E_MNTAPI_UNSUPPORTED_FT_VOLUME_get();
  public static readonly int VIX_E_MNTAPI_PARTITION_NOT_FOUND = VixDiskLibPINVOKE.VIX_E_MNTAPI_PARTITION_NOT_FOUND_get();
  public static readonly int VIX_E_MNTAPI_PUTFILE_ERROR = VixDiskLibPINVOKE.VIX_E_MNTAPI_PUTFILE_ERROR_get();
  public static readonly int VIX_E_MNTAPI_GETFILE_ERROR = VixDiskLibPINVOKE.VIX_E_MNTAPI_GETFILE_ERROR_get();
  public static readonly int VIX_E_MNTAPI_REG_NOT_OPENED = VixDiskLibPINVOKE.VIX_E_MNTAPI_REG_NOT_OPENED_get();
  public static readonly int VIX_E_MNTAPI_REGDELKEY_ERROR = VixDiskLibPINVOKE.VIX_E_MNTAPI_REGDELKEY_ERROR_get();
  public static readonly int VIX_E_MNTAPI_CREATE_PARTITIONTABLE_ERROR = VixDiskLibPINVOKE.VIX_E_MNTAPI_CREATE_PARTITIONTABLE_ERROR_get();
  public static readonly int VIX_E_MNTAPI_OPEN_FAILURE = VixDiskLibPINVOKE.VIX_E_MNTAPI_OPEN_FAILURE_get();
  public static readonly int VIX_E_MNTAPI_VOLUME_NOT_WRITABLE = VixDiskLibPINVOKE.VIX_E_MNTAPI_VOLUME_NOT_WRITABLE_get();
  public static readonly int VIX_ASYNC = VixDiskLibPINVOKE.VIX_ASYNC_get();
  public static readonly int VIX_E_ASYNC_MIXEDMODE_UNSUPPORTED = VixDiskLibPINVOKE.VIX_E_ASYNC_MIXEDMODE_UNSUPPORTED_get();
  public static readonly int VIX_E_NET_HTTP_UNSUPPORTED_PROTOCOL = VixDiskLibPINVOKE.VIX_E_NET_HTTP_UNSUPPORTED_PROTOCOL_get();
  public static readonly int VIX_E_NET_HTTP_URL_MALFORMAT = VixDiskLibPINVOKE.VIX_E_NET_HTTP_URL_MALFORMAT_get();
  public static readonly int VIX_E_NET_HTTP_COULDNT_RESOLVE_PROXY = VixDiskLibPINVOKE.VIX_E_NET_HTTP_COULDNT_RESOLVE_PROXY_get();
  public static readonly int VIX_E_NET_HTTP_COULDNT_RESOLVE_HOST = VixDiskLibPINVOKE.VIX_E_NET_HTTP_COULDNT_RESOLVE_HOST_get();
  public static readonly int VIX_E_NET_HTTP_COULDNT_CONNECT = VixDiskLibPINVOKE.VIX_E_NET_HTTP_COULDNT_CONNECT_get();
  public static readonly int VIX_E_NET_HTTP_HTTP_RETURNED_ERROR = VixDiskLibPINVOKE.VIX_E_NET_HTTP_HTTP_RETURNED_ERROR_get();
  public static readonly int VIX_E_NET_HTTP_OPERATION_TIMEDOUT = VixDiskLibPINVOKE.VIX_E_NET_HTTP_OPERATION_TIMEDOUT_get();
  public static readonly int VIX_E_NET_HTTP_SSL_CONNECT_ERROR = VixDiskLibPINVOKE.VIX_E_NET_HTTP_SSL_CONNECT_ERROR_get();
  public static readonly int VIX_E_NET_HTTP_TOO_MANY_REDIRECTS = VixDiskLibPINVOKE.VIX_E_NET_HTTP_TOO_MANY_REDIRECTS_get();
  public static readonly int VIX_E_NET_HTTP_TRANSFER = VixDiskLibPINVOKE.VIX_E_NET_HTTP_TRANSFER_get();
  public static readonly int VIX_E_NET_HTTP_SSL_SECURITY = VixDiskLibPINVOKE.VIX_E_NET_HTTP_SSL_SECURITY_get();
  public static readonly int VIX_E_NET_HTTP_GENERIC = VixDiskLibPINVOKE.VIX_E_NET_HTTP_GENERIC_get();

  public static readonly int VIXDISKLIB_SECTOR_SIZE = VixDiskLibPINVOKE.VIXDISKLIB_SECTOR_SIZE_get();
  public static readonly int VIXDISKLIB_HWVERSION_WORKSTATION_4 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_WORKSTATION_4_get();
  public static readonly int VIXDISKLIB_HWVERSION_WORKSTATION_5 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_WORKSTATION_5_get();
  public static readonly int VIXDISKLIB_HWVERSION_WORKSTATION_6 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_WORKSTATION_6_get();
  public static readonly int VIXDISKLIB_HWVERSION_ESX30 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_ESX30_get();
  public static readonly int VIXDISKLIB_HWVERSION_ESX4X = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_ESX4X_get();
  public static readonly int VIXDISKLIB_HWVERSION_ESX50 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_ESX50_get();
  public static readonly int VIXDISKLIB_HWVERSION_ESX51 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_ESX51_get();
  public static readonly int VIXDISKLIB_HWVERSION_ESX55 = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_ESX55_get();
  public static readonly int VIXDISKLIB_HWVERSION_CURRENT = VixDiskLibPINVOKE.VIXDISKLIB_HWVERSION_CURRENT_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_UNBUFFERED = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_UNBUFFERED_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_SINGLE_LINK = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_SINGLE_LINK_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_READ_ONLY = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_READ_ONLY_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_COMPRESSION_ZLIB = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_COMPRESSION_ZLIB_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_COMPRESSION_FASTLZ = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_COMPRESSION_FASTLZ_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_COMPRESSION_SKIPZ = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_COMPRESSION_SKIPZ_get();
  public static readonly int VIXDISKLIB_FLAG_OPEN_COMPRESSION_MASK = VixDiskLibPINVOKE.VIXDISKLIB_FLAG_OPEN_COMPRESSION_MASK_get();
}

}
